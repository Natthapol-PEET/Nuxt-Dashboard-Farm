# python 3.6

import json
import random
import time

from paho.mqtt import client as mqtt_client


msg = ""

# broker = 'broker.emqx.io'
broker = '192.168.1.104'
port = 1883
topic = "plant/dashboard/image"
# generate client ID with pub prefix randomly
client_id = f'python-mqtt-{random.randint(0, 1000)}'
username = 'emqx'
password = 'public'


def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client


def publish(client):
    time.sleep(5)
    
    data = {
        "status": "next",
        "originalImage": msg,
        "ndviImage": msg,
    }
    payload = json.dumps(data)
    result = client.publish("plant/dashboard/image", payload)
    
    time.sleep(5)
    
    data = {
        "status": "end",
        "originalImage": msg,
        "ndviImage": msg,
    }
    payload = json.dumps(data)
    result = client.publish("plant/dashboard/image", payload)
    
    time.sleep(5)


def run():
    client = connect_mqtt()
    client.loop_start()
    publish(client)


if __name__ == '__main__':
    run()
